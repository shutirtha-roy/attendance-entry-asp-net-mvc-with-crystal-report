<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.AspNet.WebFormsDependencyInjection.Unity</name>
    </assembly>
    <members>
        <member name="T:Microsoft.AspNet.WebFormsDependencyInjection.Unity.HttpApplicationExtensions">
            <summary>
            Extension methods of HttpApplication that help use Unity container
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.WebFormsDependencyInjection.Unity.HttpApplicationExtensions.AddUnity(System.Web.HttpApplication)">
            <summary>
            
            </summary>
            <param name="application"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.WebFormsDependencyInjection.Unity.HttpApplicationExtensions.GetUnityContainer(System.Web.HttpApplication)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNet.WebFormsDependencyInjection.Unity.UnityAdapter">
            <summary>
            Extension methods of HttpApplication that help use Unity container
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.WebFormsDependencyInjection.Unity.UnityAdapter.AddUnity">
            <summary>
            Add a new Unity container in asp.net application. If there is WebObjectActivator already registered,
            it will be chained up. When the new WebObjectActivator can't resolve the type, the previous WebObjectActivator
            will be used. If the previous WebObjectActivator can't resolve it either, DefaultCreateInstance will be used
            which creates instance through none public default constructor based on reflection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.WebFormsDependencyInjection.Unity.UnityAdapter.GetContainer">
            <summary>
            Get most recent added Unity container
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNet.WebFormsDependencyInjection.Unity.ContainerServiceProvider">
            <summary>
            The Unity adapter for WebObjectActivator
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.WebFormsDependencyInjection.Unity.ContainerServiceProvider.GetService(System.Type)">
            <summary>
            Implementation of IServiceProvider. Asp.net will call this method to
            create the instances of Page/UserControl/HttpModule etc.
            </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
    </members>
</doc>
